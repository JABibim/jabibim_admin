<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jabibim.admin.mybatis.mapper.TeacherMapper">

    <select id="getTeacherCount" parameterType="map" resultType="int">
        SELECT count(*)
        FROM teacher t
        INNER JOIN academy a ON t.academy_id = a.academy_id
        <where>
            <!-- 상태에 따른 조건 -->
            <if test="state == 'option2'">
                t.deleted_at IS NULL
            </if>
            <if test="state == 'option3'">
                t.deleted_at IS NOT NULL
            </if>
            <!-- 관리자 여부에 따른 조건 -->
            <if test="!isAdmin">
                AND t.academy_id = #{academyId}
            </if>
            <if test='search_field == "0"'>
                AND (t.teacher_name LIKE concat('%', #{search_word}, '%')
                OR t.teacher_email LIKE concat('%', #{search_word}, '%'))
            </if>
            <if test='search_field == "1"'>
                AND t.teacher_email LIKE concat('%', #{search_word}, '%')
            </if>
            <if test='search_field == "2"'>
                AND t.teacher_email LIKE concat('%', #{search_word}, '%')
            </if>
        </where>
    </select>

    <select id="getTeacherList" parameterType="map" resultType="Teacher">
        SELECT *
        FROM (
        SELECT row_number() OVER (ORDER BY a.academy_name, t.teacher_name) AS rnum,
               a.academy_name, t.teacher_name, t.teacher_id, t.teacher_phone, t.teacher_email, t.deleted_at
        FROM teacher t
        JOIN academy a ON a.academy_id = t.academy_id
        <if test="!isAdmin">
            WHERE a.academy_id = #{academyId}
        </if>
        <if test="state != 'option1'">
            AND t.deleted_at IS ${state == 'option2' ? 'NULL' : 'NOT NULL'}
        </if>
        <if test='search_field == "0"'>
            AND (teacher_name LIKE concat('%', #{search_word}, '%')
            OR teacher_email LIKE concat('%', #{search_word}, '%'))
        </if>
        <if test='search_field == "1"'>
            AND t.teacher_email LIKE concat('%', #{search_word}, '%')
        </if>
        <if test='search_field == "2"'>
            AND t.teacher_name LIKE concat('%', #{search_word}, '%')
        </if>
        ) AS subquery
        WHERE rnum BETWEEN #{start} AND #{end}
    </select>

    <select id="teacherInfo" resultType="TeacherProfileDTO">
        select t.teacher_name,
               a.academy_name,
               t.teacher_job,
               t.teacher_password,
               t.teacher_email,
               t.teacher_phone,
               t.teacher_profile_origin_name,
               t.teacher_profile_path
        from teacher t,
             academy a
        where t.academy_id = a.academy_id
          and teacher_id = #{id}
    </select>

    <update id="update">
        update teacher
        set teacher_profile_origin_name = #{teacherProfileOriginName},
            teacher_profile_path        = #{teacherProfilePath},
            teacher_phone               = #{teacherPhone},
            teacher_email               = #{teacherEmail}
        where teacher_id = #{teacherId}
    </update>

    <update id="updatePassword">
        update teacher
        set teacher_password = #{teacherPassword}
        where teacher_id = #{teacherId}
    </update>

    <select id="getTeacherById">
        select *
        from teacher
        where teacher_id = #{teacherId}
    </select>

    <select id="getTeacherByEmail" resultType="teacher">
        select *
        from teacher
        where teacher_email = #{teacherEmail}
    </select>

    <select id="getTeacherListByAcademyId" resultType="teacher">
        select teacher_id
             , teacher_name
             , teacher_phone
             , teacher_email
             , teacher_job
             , teacher_profile_origin_name
             , teacher_profile_path
             , auth_role
             , academy_id
        from teacher
        where academy_id like #{academyId}
    </select>

    <insert id="addTeacher">
        insert into teacher
        ( academy_id
        , teacher_id
        , created_at
        , teacher_name
        , teacher_phone
        , teacher_email
        , teacher_password
        , auth_role)
        values ( #{academyId}
               , #{teacherId}
               , current_timestamp
               , #{teacherName}
               , #{teacherPhone}
               , #{teacherEmail}
               , #{teacherPassword}
               , #{authRole})
    </insert>

    <select id="getcareerList" parameterType="map" resultType="TeacherCareer">
        SELECT career_id, career_name, C.created_at, display_status
        FROM career C
        JOIN teacher T ON C.teacher_id = T.teacher_id
        <where>
            <if test="!isAdmin">
                AND T.academy_id = #{academyId} <!-- 관리자가 아닐 경우 학원 ID로 필터 -->
            </if>
        </where>
    </select>

    <update id="resetAllCareers">
        UPDATE career
        SET display_status = 0
    </update>

    <update id="updateCareerActive">
        UPDATE career
        SET display_status = CASE
                                 WHEN career_id = #{asisCareerId} THEN 0
                                 WHEN career_id = #{tobeCareerId} THEN 1
            END
        WHERE career_id IN (#{asisCareerId}, #{tobeCareerId});
    </update>

    <insert id="insertCareer">
        INSERT INTO career
        ( career_id
        , created_at
        , career_name
        , career_file_origin_name
        , career_file_path
        , display_status
        , teacher_id
        , academy_id)
        VALUES ( #{careerId}
               , current_timestamp
               , #{careerName}
               , #{careerFileOriginName}
               , #{careerFilePath}
               , 0
               , #{teacherId}
               , #{academyId})
    </insert>

    <select id="getUploadPathByCareerId" resultType="String">
        SELECT career_file_path
        FROM career
        WHERE deleted_at IS NULL
          AND career_id = #{careerId}
    </select>
    <insert id="insertOauthTeacher">
        INSERT INTO teacher
        (teacher_id, created_at, teacher_name, teacher_email,oauth_picture, provider, provider_id, auth_role, academy_id)
        VALUES
            (#{teacherId}, current_timestamp, #{teacherName}, #{teacherEmail},
             #{oauthPicture}, #{provider}, #{providerId} ,#{authRole}, #{academyId})
    </insert>

    <update id="updateOauthTeacher">
        UPDATE teacher
        SET updated_at = current_timestamp, teacher_name = #{teacherName},
            oauth_picture = #{oauthPicture}
        WHERE teacher_id = #{teacherId}
    </update>

    <select id="getTeacherByProviderId">
        select *
        from teacher
        where provider_id = #{providerId}
    </select>

    <update id="updateTeacherAcademy">
        UPDATE teacher SET academy_id = #{academyId}, code = #{code}, auth_role = 'ROLE_LECTURER' WHERE teacher_id = #{teacherId}
    </update>

    <select id="getTeacherIdByEmail" resultType="String">
        select teacher_id from teacher
        where teacher_email = #{teacherEmail}
    </select>

    <select id="getAcademyIdByEmail" resultType="String">
        select academy_id from teacher
        where teacher_email = #{teacherEmail}
    </select>
</mapper>