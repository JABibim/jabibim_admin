<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jabibim.admin.mybatis.mapper.OrdersMapper">

  <select id="getOrderByPaymentId" resultType="orders">
    SELECT * FROM orders WHERE payment_id = #{paymentId} AND academy_id = #{academyId}
  </select>

  <insert id="insertOrders" parameterType="orders">
    INSERT INTO orders
    (orders_id, created_at, orders_number, total_price, orders_status, student_id, course_id, payment_id, academy_id)
    VALUES (#{ordersId}, CURRENT_TIMESTAMP, #{ordersNumber}, #{totalPrice}, #{ordersStatus}, #{studentId}, #{courseId}, #{paymentId}, #{academyId})
  </insert>


  <update id="updateOrderStatus" parameterType="orders">
    UPDATE orders SET orders_status = #{ordersStatus} WHERE orders_id = #{ordersId}
  </update>

   <!-- 주문 목록 총 개수 조회 -->
  <select id="getOrdersListCount" resultType="int">
    SELECT COUNT(*)
    FROM (SELECT *
            FROM (SELECT DISTINCT o.*, c.course_name, s.student_name, p.payment_amount, p.payment_status, p.payment_method, p.paid_at
                  FROM (SELECT * FROM orders WHERE academy_id = #{academyId}) o
                  INNER JOIN (SELECT course_id, course_name FROM course WHERE academy_id = #{academyId}) c
                  ON o.course_id = c.course_id
                  INNER JOIN (SELECT student_id, student_name FROM student WHERE academy_id = #{academyId}) s
                  ON o.student_id = s.student_id
                  LEFT OUTER JOIN (SELECT payment_id, payment_amount, payment_status, payment_method, paid_at, course_id, orders_id
                                  FROM payment WHERE academy_id = #{academyId}) p
                  ON o.payment_id = p.payment_id AND o.orders_id = p.orders_id AND o.course_id = p.course_id
    ) j
    <where>
      <include refid="_search"/>
    </where>
    ) d
  </select>

  <!-- 주문 목록 조회 -->
  <select id="getOrdersList" resultType="ordersListVO">
SELECT *
FROM (
    SELECT *
    FROM (SELECT DISTINCT o.*, c.course_name, s.student_name, p.payment_amount, p.payment_status, p.payment_method, p.paid_at
          		FROM (SELECT * FROM orders WHERE academy_id = #{academyId}) o
          		INNER JOIN (SELECT course_id, course_name FROM course WHERE academy_id = #{academyId}) c
          		ON o.course_id = c.course_id
          		INNER JOIN (SELECT student_id, student_name FROM student WHERE academy_id = #{academyId}) s
          		ON o.student_id = s.student_id
          		LEFT OUTER JOIN (SELECT payment_id, payment_amount, payment_status, payment_method, paid_at, course_id, orders_id FROM payment WHERE academy_id = #{academyId}) p
          		ON o.payment_id = p.payment_id AND o.orders_id = p.orders_id AND o.course_id = p.course_id
          		ORDER BY created_at DESC
          		) j
          <where>
            <include refid="_search"/>
          </where>

          )d
    LIMIT #{limit} OFFSET #{offset}
  </select>


  <sql id="_search">
    <if test="orderDate1 != null">
      AND DATE(created_at) &gt;= #{orderDate1}
    </if>
    <if test="orderDate2 != null">
      AND DATE(created_at) &lt;= #{orderDate2}
    </if>

    <if test="paymentDate1 != null">
      AND DATE(paid_at) &gt;= #{paymentDate1}
    </if>
    <if test="paymentDate2 != null">
      AND DATE(paid_at) &lt;= #{paymentDate2}
    </if>

    <if test="paymentStatus != null">
      <if test="paymentStatus == 'success'">
        AND payment_status = 'PAID'
      </if>
      <if test="paymentStatus == 'failed'">
        AND payment_status = 'FAILED'
      </if>
      <if test="paymentStatus == 'cancelled'">
        AND payment_status = 'CANCELLED'
      </if>
      <if test="paymentStatus == 'pending'">
        AND payment_status = 'PENDING'
      </if>
    </if>

    <if test="paymentMethod != null">
      <if test="paymentMethod == 'card'">
        <!-- 카드 -->
        AND payment_method = 'PaymentMethodCard'
      </if>
      <!-- 통장입금 -->
      <if test="paymentMethod == 'transfer'">
        AND payment_method = 'PaymentMethodTransfer'
      </if>
    </if>

    <if test="searchField != null and searchField != null">
    AND (
      <foreach collection="searchField" item="data" separator="or">
        <choose>
          <when test='data == "n"'> student_name</when>
          <when test='data == "c"'> course_name</when>
          <when test='data == "o"'> orders_number</when>
        </choose>
        LIKE #{searchWord}
      </foreach>
    )
      
    </if>
  </sql>



  <select id="getOrdersDetail" resultType="ordersDetailVO">
    SELECT distinct o.*, c.course_name, c.course_price, s.student_name, s.student_email, s.student_phone, s.grade_name, s.discount_rate, p.payment_amount, p.paid_at, p.payment_method, p.payment_status
    FROM (SELECT * FROM orders WHERE academy_id = #{academyId}) o 
    INNER JOIN (SELECT course_id, course_name, course_price FROM course WHERE academy_id = #{academyId}) c
    ON o.course_id = c.course_id
    INNER JOIN (SELECT student_id, student_name, student_email, student_phone, grade_name ,discount_rate, student.academy_id FROM student INNER JOIN grade ON student.grade_id = grade.grade_id AND student.academy_id = grade.academy_id WHERE student.academy_id=#{academyId}) s
    ON o.student_id = s.student_id
    LEFT OUTER JOIN (SELECT payment_id, payment_amount, payment_method, payment_status, paid_at, orders_id, course_id FROM payment WHERE academy_id=#{academyId}) p
    ON o.payment_id = p.payment_id AND o.orders_id = p.orders_id AND o.course_id = p.course_id
    WHERE o.orders_id = #{ordersId}
  </select>

  <select id="getPurchasedCourseList" resultType="purchasedCourseVO">
    SELECT course_id, MAX(created_at) as created_at
    FROM orders
    WHERE academy_id = #{academyId} AND student_id = #{studentId} AND orders_status = 1
    GROUP BY course_id
  </select>
</mapper>