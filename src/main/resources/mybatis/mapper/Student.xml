<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jabibim.admin.mybatis.mapper.StudentMapper">

    <select id="getStudentCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM (
        SELECT
        A.academy_name, S.student_name, S.student_email, S.created_at, S.deleted_at
        FROM student S
        JOIN academy A ON A.academy_id = S.academy_id
        <where>
            <!-- 상태에 따른 조건 -->
            <if test="state == 'option2'">
                S.deleted_at IS NULL
            </if>
            <if test="state == 'option3'">
                S.deleted_at IS NOT NULL
            </if>
            <!-- 관리자 여부에 따른 조건 -->
            <if test="!isAdmin">
                AND S.academy_id = #{academyId}
            </if>
            <!-- 날짜 조건 -->
            <if test="startDate != null and startDate != 'null'">
                AND S.created_at &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != 'null'">
                AND S.created_at &lt;= #{endDate}
            </if>
            <!-- 학년 조건 -->
            <if test='studentGrade == "0"'>
                AND S.grade_id IN (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId}
                )
            </if>
            <if test='studentGrade == "1"'>
                AND S.grade_id = (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId} AND grade_name = 'BRONZE'
                )
            </if>
            <if test='studentGrade == "2"'>
                AND S.grade_id = (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId} AND grade_name = 'SILVER'
                )
            </if>
            <if test='studentGrade == "3"'>
                AND S.grade_id = (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId} AND grade_name = 'GOLD'
                )
            </if>
            <!-- 검색 조건 -->
            <if test='search_field == "0"'>
                AND (student_name LIKE CONCAT('%', #{search_word}, '%')
                OR student_email LIKE CONCAT('%', #{search_word}, '%'))
            </if>
            <if test='search_field == "1"'>
                AND student_name LIKE CONCAT('%', #{search_word}, '%')
            </if>
            <if test='search_field == "2"'>
                AND student_email LIKE CONCAT('%', #{search_word}, '%')
            </if>
        </where>
        ) AS subquery
    </select>

    <select id="getStudentList" parameterType="map" resultType="student">
        SELECT subquery.*, p.payment_amount_sum
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY A.academy_name, S.student_name) AS rnum,
        A.academy_name, S.student_id, S.student_name, S.student_email, S.created_at, S.deleted_at
        FROM student S
        JOIN academy A ON A.academy_id = S.academy_id
        <where>
            <!-- 상태 조건 -->
            <if test="state == 'option2'">
                S.deleted_at IS NULL
            </if>
            <if test="state == 'option3'">
                S.deleted_at IS NOT NULL
            </if>
            <!-- 관리자 여부 -->
            <if test="!isAdmin">
                AND S.academy_id = #{academyId}
            </if>
            <!-- 날짜 조건 -->
            <if test="startDate != null and startDate != 'null'">
                AND S.created_at &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != 'null'">
                AND S.created_at &lt;= #{endDate}
            </if>
            <!-- 학년 조건 -->
            <if test='studentGrade == "0"'>
                AND S.grade_id IN (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId}
                )
            </if>
            <if test='studentGrade == "1"'>
                AND S.grade_id = (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId} AND GRADE_NAME = 'BRONZE'
                )
            </if>
            <if test='studentGrade == "2"'>
                AND S.grade_id = (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId} AND GRADE_NAME = 'SILVER'
                )
            </if>
            <if test='studentGrade == "3"'>
                AND S.grade_id = (
                SELECT grade_id
                FROM grade
                WHERE academy_id = #{academyId} AND grade_name = 'GOLD'
                )
            </if>
            <!-- 검색 조건 -->
            <if test='search_field == "0"'>
                AND (student_name LIKE CONCAT('%', #{search_word}, '%')
                OR student_email LIKE CONCAT('%', #{search_word}, '%'))
            </if>
            <if test='search_field == "1"'>
                AND student_name LIKE CONCAT('%', #{search_word}, '%')
            </if>
            <if test='search_field == "2"'>
                AND student_email LIKE CONCAT('%', #{search_word}, '%')
            </if>
        </where>
        ) AS subquery
        LEFT OUTER JOIN (SELECT student_id, COALESCE(sum(payment_amount), 0) as payment_amount_sum FROM payment WHERE academy_id = #{academyId} GROUP BY student_id) p
        ON subquery.student_id = p.student_id
        WHERE rnum BETWEEN #{start} AND #{end}
    </select>
    
    <select id="getStudentAdCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM student
        <where>
            <if test="!isAdmin">
                academy_id = #{academyId}
            </if>
            <!-- 검색 조건 -->
            <if test='search_field == "0"'>
                AND (student_name LIKE CONCAT('%', #{search_word}, '%')
                OR student_email LIKE CONCAT('%', #{search_word}, '%'))
            </if>
            <if test='search_field == "1"'>
                AND student_name LIKE CONCAT('%', #{search_word}, '%')
            </if>
            <if test='search_field == "2"'>
                AND student_email LIKE CONCAT('%', #{search_word}, '%')
            </if>
        </where>
    </select>

    <select id="getStudentAdList" parameterType="map" resultType="student">
        SELECT *
        FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY student_id) AS rnum,
        student_id,
        student_name,
        student_email,
        ads_agreed,
        created_at
        FROM student
        <where>
            <if test="!isAdmin">
                academy_id = #{academyId}
            </if>
            <!-- 검색 조건 -->
            <if test='search_field == "0"'>
                AND (student_name LIKE CONCAT('%', #{search_word}, '%')
                OR student_email LIKE CONCAT('%', #{search_word}, '%'))
            </if>
            <if test='search_field == "1"'>
                AND student_name LIKE CONCAT('%', #{search_word}, '%')
            </if>
            <if test='search_field == "2"'>
                AND student_email LIKE CONCAT('%', #{search_word}, '%')
            </if>
        </where>
        ) AS subquery
        WHERE rnum BETWEEN #{start} AND #{end}
    </select>

    <update id="replaceGrade" parameterType="DeleteGradeDTO">
        UPDATE student
        SET grade_id = #{newGradeId}
        WHERE grade_id = #{gradeId}
        and academy_id = #{academyId}
    </update>

    <select id="getStudentGrades" resultType="GetStudentGradesDTO">
        SELECT row_number() over (order by discount_rate desc) rnum, g.*
        FROM (SELECT a.academy_id
                , g.grade_id
                , a.academy_name
                , g.created_at
                , g.grade_name
                , g.discount_rate
                , (SELECT COUNT(student_id) FROM student s WHERE s.grade_id = g.grade_id) student_count
            FROM grade g
            INNER JOIN academy a
            ON a.academy_id = g.academy_id
            WHERE g.academy_id = #{academyId}
            ORDER BY discount_rate DESC
            ) g;
    </select>






















    <select id="getStudentByEmail" resultType="studentUserVO">
        SELECT *
        FROM student
        WHERE academy_id= #{academyId}
        AND student_email = #{email}
    </select>










    <insert id="insertStudent" >
        INSERT INTO student
        VALUES (#{studentId}, CURRENT_TIMESTAMP()
                , NULL, NULL
                , #{studentName}, #{studentEmail}
                , #{studentPhone}, #{studentPassword}
                , NULL, 0
                , NULL, NULL
                , #{adsAgreed}, 'ROLE_STUDENT'
                ,(SELECT grade_id
                  FROM grade
                  where academy_id=#{academyId}
                  ORDER BY discount_rate
                  LIMIT 1 OFFSET 0), #{academyId})
    </insert>


    <!--  dashboard 신규 수강생 data select 쿼리  -->
    <select id="getStudentChartData" resultType="map">
        SELECT DATE_FORMAT(created_at, '%Y-%m-%d') AS created_date,
               COUNT(*) AS STUDENT_COUNT
        FROM student
        WHERE CREATED_AT >= CURDATE() - INTERVAL 30 DAY
          AND deleted_at IS NULL
          AND academy_id = #{academyId}
        GROUP BY DATE_FORMAT(created_at, '%Y-%m-%d')
        ORDER BY created_date
    </select>
</mapper>